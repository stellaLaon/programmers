/*

문자열 내 마음대로 정렬하기
문제 설명
문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 
각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 
예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 
각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

제한 조건
strings는 길이 1 이상, 50이하인 배열입니다.
strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
모든 strings의 원소의 길이는 n보다 큽니다.
인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
입출력 예
strings	n	return
["sun", "bed", "car"]	1	["car", "bed", "sun"]
["abce", "abcd", "cdx"]	2	["abcd", "abce", "cdx"]

*/

/*wrong.1
TreeMap은 key-value를 쌍으로하여, key를 기준으로 자동 오름차순하여 저장하지만
key가 중복일 경우에는 null로 대체하여 저장한다.
*/
import java.util.*;

class Solution {
    public String[] solution(String[] strings, int n) {
        int len = strings.length;
        String[] answer = new String[len];
        
        TreeMap<Character, String> tm = new TreeMap<>();
        for(String str : strings){
            tm.put(str.charAt(n), str);
        }
        for( int i = 0 ; i < len ; i++ ){
            answer[i] = tm.get(i);
        }
        
        return answer;
    }
}

/*wrong.2
구글링하니 만든 TreeMultimap이 해결할 수 있다고 하나,
package com.google.common.collect does not exist
import com.google.common.collect.*; 에러가 발생했다.
*/

import com.google.common.collect.*;

class Solution {
    public String[] solution(String[] strings, int n) {
        int len = strings.length;
        String[] answer = new String[len];
        
        TreeMultimap<Character, String> tm = new TreeMap<>();
        for(String str : strings){
            tm.put(str.charAt(n), str);
        }
        int i = 0;
        for(Character key : tm.keySet()){
            answer[i] = tm.get(key);
            i++;
        }
        
        return answer;
    }
}

//answer.1 


import java.util.Arrays;
import java.util.Comparator;

public class Solution {
    public String[] solution(String[] strings, int n) {
        // 문자열 배열을 주어진 인덱스 n번째 글자를 기준으로 정렬하는 메서드
        //정렬 기준을 지정할 수 있는 인터페이스를 익명클래스로 구현한 객체가 정렬 기준으로서 전달됨.
        Arrays.sort(strings, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                // 두 개의 문자열 s1과 s2를 비교하는 compare 메서드를 재정의
                //strings의 모든 원소들을 최소 한번 이상 비교함.
                char c1 = s1.charAt(n);
                char c2 = s2.charAt(n);

                if (c1 == c2) {
                    // 인덱스 n의 문자가 같을 경우에는 사전식으로 정렬
                    return s1.compareTo(s2);
                } else {
                    // 인덱스 n의 문자를 기준으로 오름차순 정렬
                    return Character.compare(c1, c2);
                }
            }
        });

        return strings;
    }
}
