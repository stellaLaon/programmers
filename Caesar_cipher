/*
시저 암호
문제 설명
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 "AB"는 1만큼 밀면 "BC"가 되고, 3만큼 밀면 "DE"가 됩니다. "z"는 1만큼 밀면 "a"가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

제한 조건
공백은 아무리 밀어도 공백입니다.
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
s의 길이는 8000이하입니다.
n은 1 이상, 25이하인 자연수입니다.

입출력 예
s	        n	      result
"AB"	    1	      "BC"
"z"	      1     	"a"
"a B z"	  4	      "e F d"

*/

class Solution {
    public String solution(String s, int n) {
        //문자열 수정이 잦을것으로 예상, StringBuilder사용
        StringBuilder sb = new StringBuilder();
        
        
        //숫자 기준으로 글자 수정은 char형이 용이하므로 toCharArray()사용
        for(char ch : s.toCharArray()){
        //공백을 포함하여 retrun하므로 ' '일 경우 추가
            if(ch == ' '){
                sb.append(' ');
                //s의 spell이 a~z면
            }else if(ch >= 'a' && ch <= 'z'){
            /*(ch + n - 'a')%26는 ch+n의 아스키 코드값을 소문자 기준으로 초기화하여
            26칸을 돈 나머지에 'a'를 더함
            ex. ch = 'z'면 아스키코드값은 122, n=4 -> 126 - 97 = 29
                29는 26기준 1칸돌고 3번째이므로 + 97을 하면 100이 되어 d가 됨 
            */
                char temp = (char)('a'+(ch + n - 'a')%26);
                sb.append(temp);
           //이렇게 대소문자 분리하지 않고 %26처리하게 된다면,
           //대문자의 경우+n을 했을때 소문자영역에서 처리될 오류가 발생할 수 있음.
            }else if(ch >= 'A' && ch <= 'Z'){
                char temp = (char)('A'+(ch + n - 'A')%26);
                sb.append(temp);
         }
        
       
        }
        //sb를 String형변환하여 반환
       return sb.toString();  
    }
}
