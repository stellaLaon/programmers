/*
문제 설명
가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 
80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다. 
***** 하지만 2번 명함을 가로로 눕혀 수납한다면  ******
80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 
이때의 지갑 크기는 4000(=80 x 50)입니다.

모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 
모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 
지갑의 크기를 return 하도록 solution 함수를 완성해주세요.

제한사항
sizes의 길이는 1 이상 10,000 이하입니다.
sizes의 원소는 [w, h] 형식입니다.
w는 명함의 가로 길이를 나타냅니다.
h는 명함의 세로 길이를 나타냅니다.
w와 h는 1 이상 1,000 이하인 자연수입니다.
*/

import java.util.*;

class Solution {
    public int solution(int[][] sizes) {
        //문제요약 : 수납 시 명함은 90도 회전 가능
        //즉, size배열의 [i][0] , [i][1] 중  max == 가로, min == 세로.
        //가로 중 max값 * 세로 중 max을 return
        
        int len = sizes.length;
        //가로 길이, 세로 길이 저장할 배열 생성
        int[] w = new int[len]; int[] h = new int[len];
        
        for(int i = 0 ; i < len ; i++){
        //각 명함의 가로와 세로를 구함
            w[i] = Math.max(sizes[i][0], sizes[i][1]);
            h[i] = Math.min(sizes[i][0], sizes[i][1]);
        }
        //가로와 세로를 오름차순 정렬
        Arrays.sort(w); Arrays.sort(h);
        
        //가장 마지막의 수가 최대값이므로 두 수를 곱해서 반환
        return w[len-1]*h[len-1];
    }
}
