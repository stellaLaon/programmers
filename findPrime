/*
소수 찾기
star
확인
문제 설명
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, 
solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

입출력 예 #1
1부터 10 사이의 소수는 [2,3,5,7] 4개가 존재하므로 4를 반환

입출력 예 #2
1부터 5 사이의 소수는 [2,3,5] 3개가 존재하므로 3를 반환
*/

class Solution {
    public int solution(int n) {
    //0부터 n까지 모든 수의 소수 여부를 저장하는 배열
        boolean[] isPrime = new boolean[n+1];  

        // 초기화: 모든 수를 소수로 가정
        for (int i = 2; i <= n; i++) {
            isPrime[i] = true;
        }

        /*에라토스테네스의 체 알고리즘
         1. 가장 작은 소수인 2부터 시작하여 배수를 차례로 제외시킵니다. 
          -> 2는 소수이므로 2의 배수들을 소수가 아닌 수로 표시합니다. 
             마찬가지로 3은 소수이므로 3의 배수들을 소수가 아닌 수로 표시합니다. 
             이 과정을 √n까지(Math.sqrt(n)사용) 반복합니다.
          2. 반복이 끝난 후에 남아있는 수들은 모두 소수입니다
        */
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (isPrime[i]) {
                // i의 배수들을 소수가 아닌 수로 표시
                for (int j = i * i; j <= n; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        int cnt = 0;//소수 카운트 하는 변수
        for (int i = 2; i <= n; i++) {
        //isPrice[i]가 참이면 소수이므로 count를++한다.
            if (isPrime[i]) {
                cnt++;
            }
        }

        return cnt;
    }
}
